library(httr)
library(riigiteenused)
andmedLai=andmedSisse()
andmedPikk=andmedPikaks(andmedLai)
View(andmedPikk)
r <- GET("http://httpbin.org/get")
status_code(r)
r=GET("http://majandus24.postimees.ee/section/522")
status_code(r)
proov<-sapply(andmedPikk$url, function(x) tryCatch(http_status(GET(x))$category, error=function(e) 'error')) %>% as.data.frame
library(dplyr)
proov<-sapply(andmedPikk$url, function(x) tryCatch(http_status(GET(x))$category, error=function(e) 'error')) %>% as.data.frame
View(andmedPikk)
proov<-sapply(andmedPikk$url[1], function(x)
tryCatch(http_status(GET(x))$category,
error=function(e) 'error')) %>% as.data.frame
View(proov)
proov<-sapply(andmedPikk$url[1:2], function(x)
tryCatch(http_status(GET(x))$category,
error=function(e) 'error')) %>% as.data.frame
View(proov)
proov<-sapply(andmedPikk$url, function(x)
tryCatch(http_status(GET(x))$category,
error=function(e) 'error')) %>% as.data.frame
idx <- 1
proov<-sapply(andmedPikk$url, function(x)
{tryCatch(http_status(GET(x))$category,
error=function(e) 'error');print(idx); idx <<- idx + 1 }) %>% as.data.frame
library(httr)
library(riigiteenused)
library(dplyr)
length(unique(andmedPikk$url))
unikUrlid=unique(andmedPikk$url)
urliKontorllija=function(urlid) {
idx <- 1
vastused<-sapply(urlid, function(x)
{tryCatch(http_status(GET(x))$category,
error=function(e) 'error');print(idx); idx <<- idx + 1 }) %>% as.data.frame
return(vastused)
}
unikUrlid=unique(andmedPikk$url)
urliKontorllija(unikUrlid[1:2])
proov<-sapply(andmedPikk$url[1:2], function(x)
{tryCatch(http_status(GET(x))$category,
error=function(e) 'error');print(idx); idx <<- idx + 1 }) %>% as.data.frame
idx <- 1
proov<-sapply(andmedPikk$url[1:2], function(x)
{tryCatch(http_status(GET(x))$category,
error=function(e) 'error');print(idx); idx <<- idx + 1 }) %>% as.data.frame
proov=urliKontorllija(unikUrlid[1:2])
proov
View(proov)
r=GET("http://majandus24.postimees.ee/section/522")
status_code(r)
http_status(GET(unikUrlid[1]))$category
urliKontorllija=function(urlid) {
idx <- 1
vastused<-sapply(urlid, function(x)
{tryCatch(http_status(GET(x))$category,
error=function(e) 'error')}) %>% as.data.frame
return(vastused)
}
proov=urliKontorllija(unikUrlid[1:2])
proov
urliKontorllija=function(urlid) {
idx <- 1
vastused<-sapply(urlid, function(x)
{tryCatch(print(idx); idx <<- idx + 1;http_status(GET(x))$category,
error=function(e) 'error')}) %>% as.data.frame
return(vastused)
}
idx
idx+=1
urliKontorllija=function(urlid) {
idx <- 1
vastused<-sapply(urlid, function(x)
{print(idx); idx=idx+1;tryCatch( http_status(GET(x))$category,
error=function(e) 'error')}) %>% as.data.frame
return(vastused)
}
proov=urliKontorllija(unikUrlid[1:2])
View(proov)
urliKontorllija=function(urlid) {
idx <- 1
vastused<-sapply(urlid, function(x)
{print(idx); idx=idx+1;
tryCatch( http_status(GET(x))$category,
error=function(e) 'error')}) %>% as.data.frame
return(vastused)
}
proov=urliKontorllija(unikUrlid[1:2])
urliKontorllija=function(urlid) {
idx <- 1
vastused<-sapply(urlid, function(x)
{print(idx); idx<<-idx+1;
tryCatch( http_status(GET(x))$category,
error=function(e) 'error')}) %>% as.data.frame
return(vastused)
}
proov=urliKontorllija(unikUrlid[1:2])
unikUrlid[1:2]
proovurlid=unikUrlid[1:2]
unikTulemused=urliKontorllija(proovurlid)
View(unikTulemused)
urliKontorllija=function(urlid) {
idx <- 1
vastused<-sapply(urlid, function(x)
{print(idx); idx<<-idx+1;
tryCatch( http_status(GET(x))$category,
error=function(e) 'error')}) %>% as.data.frame
colnames(vastused)[2]="response"
return(vastused)
}
proov=urliKontorllija(unikUrlid[1:2])
urliKontorllija=function(urlid) {
idx <- 1
vastused<-sapply(urlid, function(x)
{print(idx); idx<<-idx+1;
tryCatch( http_status(GET(x))$category,
error=function(e) 'error')}) %>% as.data.frame
colnames(vastused)[1]="response"
return(vastused)
}
proov=urliKontorllija(unikUrlid[1:2])
proov
efektiivneUrliKontrollija=function(urlid){
unikUrlid=unique(urlid)
unikTulemused=urliKontorllija(unikUrlid)
unikTulemused$algne=unikUrlid
tulem=as.data.frame(urlid)
colnames(tulem)="original"
tulem=merge(tulem, unikUrlid, by.x="original", by.y=0, all=T)
return(tulem)
}
proovUrlid=urliKontorllija(andmedLai$url[1:20])
length(unique(andmedLai$url[1:20]))
View(proovUrlid)
urliKontorllija=function(urlid) {
idx <- 1
vastused<-sapply(urlid, function(x)
{print(idx); idx<<-idx+1;
tryCatch( http_status(GET(x))$category,
error=function(e) 'error')}) %>% as.data.frame
vastused$url=urlid
colnames(vastused)[1]="response"
return(vastused)
}
efektiivneUrliKontrollija=function(urlid){
unikUrlid=unique(urlid)
unikTulemused=urliKontorllija(unikUrlid)
unikTulemused$algne=unikUrlid
tulem=as.data.frame(urlid)
colnames(tulem)="original"
tulem=merge(tulem, unikUrlid, by.x="original", by.y="url", all=T)
return(tulem)
}
proovUrlid=urliKontorllija(andmedLai$url[1:20])
efektiivneUrliKontrollija(andmedLai$url[1:20])
efektiivneUrliKontrollija=function(urlid){
unikUrlid=unique(urlid)
unikTulemused=urliKontorllija(unikUrlid)
unikTulemused$algne=unikUrlid
tulem=as.data.frame(urlid)
colnames(tulem)="original"
tulem=merge(tulem, unikTulemused, by.x="original", by.y="url", all=T)
return(tulem)
}
efektiivneUrliKontrollija(andmedLai$url[1:20])
proov=efektiivneUrliKontrollija(andmedLai$url[1:20])
urliKontorllija=function(urlid) {
idx <- 1
vastused<-sapply(urlid, function(x)
{cat("working on url nr",idx); idx<<-idx+1;
tryCatch( http_status(GET(x))$category,
error=function(e) 'error')}) %>% as.data.frame
vastused$url=urlid
colnames(vastused)[1]="response"
return(vastused)
}
efektiivneUrliKontrollija=function(urlid){
unikUrlid=unique(urlid)
unikTulemused=urliKontorllija(unikUrlid)
unikTulemused$algne=unikUrlid
tulem=as.data.frame(urlid)
colnames(tulem)="original"
tulem=merge(tulem, unikTulemused, by.x="original", by.y="url", all=T)
return(tulem)
}
View(proov)
View(proov)
length(unique(proov$original))
length(unique(proov$algne))
#kontrolli unikaalseid urle ja siis jagab tulemused algsete peale laiali
efektiivneUrliKontrollija=function(urlid){
unikUrlid=unique(urlid)
unikTulemused=urliKontorllija(unikUrlid)
unikTulemused$algne=unikUrlid
tulem=as.data.frame(urlid)
colnames(tulem)="original"
tulem=merge(tulem, unikTulemused, by.x="original", by.y="url", all=T)
tulem$algne=NULL
return(tulem)
}
proov=efektiivneUrliKontrollija(andmedLai$url[1:20])
urliKontorllija=function(urlid) {
idx <- 1
vastused<-sapply(urlid, function(x)
{cat("working on url nr",idx, "\n"); idx<<-idx+1;
tryCatch( http_status(GET(x))$category,
error=function(e) 'error')}) %>% as.data.frame
vastused$url=urlid
colnames(vastused)[1]="response"
return(vastused)
}
proov=efektiivneUrliKontrollija(andmedLai$url[1:20])
View(proov)
andmedPikk$url
andmedPikk$url[1:5]
efektiivneUrliKontrollija=function(andmed){
unikUrlid=unique(andmed$url)
unikTulemused=urliKontorllija(unikUrlid)
unikTulemused$algne=unikUrlid
#tulem=as.data.frame(urlid)
#colnames(tulem)="original"
tulem=merge(andmed, unikTulemused, by.x="url", by.y="url", all=T)
tulem$algne=NULL
return(tulem)
}
proov=efektiivneUrliKontrollija(andmedLai[1:20,])
View(proov)
proov=efektiivneUrliKontrollija(andmedLai[1:50,])
names(proov)
table(proov$response)
efektiivneUrliKontrollija=function(andmed){
unikUrlid=unique(andmed$url)
unikTulemused=urliKontorllija(unikUrlid)
#unikTulemused$algne=unikUrlid
#tulem=as.data.frame(urlid)
#colnames(tulem)="original"
tulem=merge(andmed, unikTulemused, by.x="url", by.y="url", all=T)
tulem$algne=NULL
return(tulem)
}
proov=efektiivneUrliKontrollija(andmedLai[1:50,])
table(proov$response)
proov[proov$response=='Client error',]
urlid=efektiivneUrliKontrollija(andmedLai[1:50,])
urlid=efektiivneUrliKontrollija(andmedLai)
table(urlid$response)
erroritega=urlid[grep('error', urlid$response),]
View(erroritega)
proov=urlid[, c("url", "response")]
View(proov)
proov=erroritega[, c("url", "response")]
View(proov)
View(andmedLai)
andmedLai$legalBasisUrl[1]
sedused=andmedLai$legalBasisUrl
sedused[1]
sedused[1][1]
sedused[1][[1]]
sedused[[1]]
sedused[[1]][1]
sedused[[1]][2]
sedused[[1]][3]
sedused[[1]][4]
sedused[[1]][4][1]
names(andmedLai)
lingid<-as.vector(as.matrix(AndmedLai[,26]))
lingid<-as.vector(as.matrix(andmedLai[,26]))
lingid
lingid[1,]
urlid<-sapply(services$legalBasisUrl, function(x) paste(x[,4], collapse='#§#'))
urlid<-sapply(andmedLai$legalBasisUrl, function(x) paste(x[,4], collapse='#§#'))
urlid
type(urlid)
class(urlid)
urlid[1]
urlid[1:2]
sedused[1][1]
urlid<-as.vector(as.matrix(urlid))
urlid<-strsplit(urlid, '#§#') %>% unlist
urlid<-data.frame(url=urlid)
View(urlid)
lingid<-as.vector(as.matrix(andmedLai[,26]))
urlid<-sapply(andmedLai$legalBasisUrl, function(x) paste(x[,4], collapse='#§#'))
urlid<-as.vector(as.matrix(urlid))
urlid<-strsplit(urlid, '#§#') %>% unlist
class(urlid)
as.data.frame(andmedLai$legalBasisUrl[1])
sapply(andmedLai$legalBasisUrl[1], function(x) as.data.frame(x))
sapply(andmedLai$legalBasisUrl[1], function(x) data.frame(x))
sapply(andmedLai$legalBasisUrl[1:2], function(x) data.frame(x))
proov<-sapply(andmedLai$legalBasisUrl[1:2], function(x) data.frame(x))
View(proov)
proov<-sapply(andmedLai$legalBasisUrl[1:3], function(x) data.frame(x))
View(proov)
andmedLai$legalBasisUrl[1]
andmedLai$legalBasisUrl[2]
proov
proov<-sapply(andmedLai$legalBasisUrl[1:3], function(x) data.frame(x[,4]))
proov
proov<-sapply(andmedLai$legalBasisUrl[1:3], function(x) data.frame(paste(x[,4], collapse='#§#')))
proov
proov<-sapply(andmedLai$legalBasisUrl[1:3], function(x) as.data.frame(paste(x[,4], collapse='#§#')))
proov<-sapply(andmedLai$legalBasisUrl[1:3], function(x) rbind(as.data.frame(paste(x[,4], collapse='#§#'))))
proov
proov<-sapply(andmedLai$legalBasisUrl[1:3], function(x) rbind(as.data.frame(strsplit(paste(x[,4], collapse='#§#'),'#§#'))))
proov
library(data.table)
proov=rbindlist(andmedLai$legalBasisUrl, fill=TRUE)
View(proov)
names(andmedLai$legalBasisUrl)
names
andmedLai$legalBasisUrl[1]
proov=andmedLai$legalBasisUrl
setNames(proov, andmedLai$identifier)
proov=setNames(proov, andmedLai$identifier)
proov=rbindlist(proov, fill=TRUE)
View(proov)
proov=andmedLai$legalBasisUrl
proov=setNames(proov, andmedLai$identifier)
proov=rbindlist(proov, fill=TRUE, use.names = T)
View(proov)
proov=andmedLai$legalBasisUrl
proov=setNames(proov, andmedLai$identifier)
proov=rbindlist(proov, andmedLai$identifier, fill=TRUE)
proov=rbindlist(data.frme(proov, andmedLai$identifier), fill=TRUE)
proov=rbindlist(data.frame(proov, andmedLai$identifier), fill=TRUE)
proov=rbindlist(proov, fill=TRUE)
View(proov)
names(andmedLai$legalBasisUrl)
proov=andmedLai$legalBasisUrl
proov=setNames(proov, andmedLai$identifier)
names(proov)
my_list <- lapply(split(subset(iris, select = -Species),
iris$Species), "[", 1:2, )
my_list2 <-
mapply(`[<-`, my_list, 'Species', value = names(my_list), SIMPLIFY = FALSE)
dplyr::rbind_all(my_list2)
proov=andmedLai$legalBasisUrl
proov=setNames(proov, andmedLai$identifier)
my_list2 <-
mapply(`[<-`, proov, 'service_id', value = names(proov), SIMPLIFY = FALSE)
dplyr::rbind_all(my_list2)
proov=dplyr::rbind_all(my_list2)
View(proov)
seadused=setNames(proov, andmedLai$identifier)
seadused <- mapply(`[<-`, seadused, 'service_id', value = names(seadused), SIMPLIFY = FALSE)
oigusaktid=dplyr::rbind_all(seadused)
seadused=setNames(andmedLai$legalBasisUrl, andmedLai$identifier)
seadused <- mapply(`[<-`, seadused, 'service_id', value = names(seadused), SIMPLIFY = FALSE)
oigusaktid=dplyr::rbind_all(seadused)
View(oigusaktid)
View(oigusaktid)
oigusaktid_urlid=efektiivneUrliKontrollija(oigusaktid)
names(andmedLai)
oigusaktid_urlid=merge(oigusaktid_urlid, andmedLai, by.x="service_id", by.y="identifier")
View(oigusaktid_urlid)
oigusaktid_urlid=merge(oigusaktid_urlid, andmedLai[,c("identifier", "name", "provider.name", "provider.memberOf.name")], by.x="service_id", by.y="identifier")
View(oigusaktid_urlid)
oigusaktid=dplyr::rbind_all(seadused)
oigusaktid_urlid=efektiivneUrliKontrollija(oigusaktid)
oigusaktid_urlid=merge(oigusaktid_urlid, andmedLai[,c("identifier", "name", "provider.name", "provider.memberOf.name")], by.x="service_id", by.y="identifier")
table(oigusaktid_urlid$response)
erroridSeadused=oigusaktid_urlid[grep('error', oigusaktid_urlid$response),]
View(erroridSeadused)
vigasedKoond=erroridSeadused
View(erroridSeadused)
vigasedKoond=erroridSeadused[, c("service_id", "name", "url", "title")]
View(vigasedKoond)
vigasedKoond$veaKirjeldus="vigane viide regulatsioonile"
View(vigasedKoond)
vigasedKanalid=erroritega[, cols]
cols=c("identifier", "name", "provider.name", "provider.memberOf.name")
vigasedKanalid=erroritega[, cols]
View(vigasedKanalid)
vigasedKoond=erroridSeadused[, c("service_id", "name", "url", "title", "provider.name", "provider.memberOf.name")]
vigasedKoond=erroridSeadused[, c("service_id", "name", "url", "provider.name", "provider.memberOf.name","title")]
vigasedKoond$veaKirjeldus="vigane viide regulatsioonile"
View(vigasedKoond)
vigasedKanalid=erroritega[, c("identifier", "name", "url", "provider.name", "provider.memberOf.name")]
vigasedKanalid$title=NULL
vigasedKoond$veaKirjeldus="vigane viide kanalile"
View(vigasedKanalid)
vigasedKoond=erroridSeadused[, c("service_id", "name", "url", "provider.name", "provider.memberOf.name","title")]
vigasedKoond$veaKirjeldus="vigane viide regulatsioonile"
vigasedKanalid=erroritega[, c("identifier", "name", "url", "provider.name", "provider.memberOf.name")]
vigasedKanalid$title=NULL
vigasedKanalid$veaKirjeldus="vigane viide kanalile"
colnames(vigasedKanalid)=column_names
column_names=c("service_id", "name", "url", "provider.name", "provider.memberOf.name","title")
colnames(vigasedKanalid)=column_names
vigasedKoond=rbind(vigasedKanalid, vigasedKoond)
View(vigasedKanalid)
vigasedKanalid=erroritega[, c("identifier", "name", "url", "provider.name", "provider.memberOf.name")]
vigasedKanalid$title="pole"
vigasedKanalid$veaKirjeldus="vigane viide kanalile"
column_names=c("service_id", "name", "url", "provider.name", "provider.memberOf.name","title")
colnames(vigasedKanalid)=column_names
vigasedKoond=rbind(vigasedKanalid, vigasedKoond)
View(vigasedKoond)
View(vigasedKanalid)
column_names=c("service_id", "name", "url", "provider.name", "provider.memberOf.name","title", "veaKirjeldus")
colnames(vigasedKanalid)=column_names
vigasedKoond=rbind(vigasedKanalid, vigasedKoond)
View(vigasedKoond)
